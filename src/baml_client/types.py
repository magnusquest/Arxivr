###############################################################################
#
#  Welcome to Baml! To use this generated code, please run the following:
#
#  $ pip install baml
#
###############################################################################

# This file was generated by BAML: please do not edit it. Instead, edit the
# BAML files and re-generate this code.
#
# ruff: noqa: E501,F401
# flake8: noqa: E501,F401
# pylint: disable=unused-import,line-too-long
# fmt: off
import baml_py
from enum import Enum
from pydantic import BaseModel, ConfigDict
from typing import Dict, Generic, List, Literal, Optional, TypeVar, Union, TypeAlias


T = TypeVar('T')
CheckName = TypeVar('CheckName', bound=str)

class Check(BaseModel):
    name: str
    expression: str
    status: str

class Checked(BaseModel, Generic[T,CheckName]):
    value: T
    checks: Dict[CheckName, Check]

def get_checks(checks: Dict[CheckName, Check]) -> List[Check]:
    return list(checks.values())

def all_succeeded(checks: Dict[CheckName, Check]) -> bool:
    return all(check.status == "succeeded" for check in get_checks(checks))



class Category(str, Enum):
    
    TECHNICAL_ISSUE = "TECHNICAL_ISSUE"
    BILLING_QUESTION = "BILLING_QUESTION"
    FEATURE_REQUEST = "FEATURE_REQUEST"
    OTHER = "OTHER"

class Option(str, Enum):
    
    Refund = "Refund"
    CancelOrder = "CancelOrder"
    TechnicalSupport = "TechnicalSupport"
    AccountIssue = "AccountIssue"
    Question = "Question"

class Email(BaseModel):
    subject: str
    body: str
    from_address: str

class MyUserMessage(BaseModel):
    role: Union[Literal["user"], Literal["assistant"]]
    content: str

class OrderInfo(BaseModel):
    order_status: Union[Literal["ORDERED"], Literal["SHIPPED"], Literal["DELIVERED"], Literal["CANCELLED"]]
    tracking_number: Optional[str] = None
    estimated_arrival_date: Optional[str] = None

class ProductSearch(BaseModel):
    query: str
    maxPrice: float
    category: str

class Response(BaseModel):
    category: "Category"
    priority: str
    message: str
    internal_notes: str

class Resume(BaseModel):
    name: str
    email: str
    experience: List[str]
    skills: List[str]

class ScheduleAppointment(BaseModel):
    customerName: str
    serviceType: str
    preferredDate: str
    duration: int
